% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/melsi_robust.R
\name{calculate_mahalanobis_dist_robust}
\alias{calculate_mahalanobis_dist_robust}
\title{Calculate Robust Mahalanobis Distance}
\usage{
calculate_mahalanobis_dist_robust(X, M)
}
\arguments{
\item{X}{A matrix of data with samples as rows and features as columns}

\item{M}{A positive definite matrix representing the Mahalanobis metric}
}
\value{
A distance matrix (dist object) containing pairwise Mahalanobis distances
between all samples using the provided metric matrix.
}
\description{
Calculates Mahalanobis distances using a learned metric matrix with numerical
stability safeguards. This function is used internally by MeLSI to compute
distances after learning the optimal metric.
}
\details{
The function implements robust Mahalanobis distance calculation by:

\itemize{
\item Ensuring the metric matrix M is positive definite
\item Using eigenvalue decomposition for numerical stability
\item Handling edge cases where eigenvalues might be very small
\item Computing distances in the transformed space
}

The Mahalanobis distance between samples i and j is calculated as:
d_M(x_i, x_j) = sqrt((x_i - x_j)^T M (x_i - x_j))

This distance metric is learned by MeLSI to be optimal for detecting
group differences in the specific dataset.
}
\examples{
# Generate test data
test_data <- generate_test_data(n_samples = 20, n_taxa = 10, n_signal_taxa = 3)
X <- test_data$counts
y <- test_data$metadata$Group

# CLR transformation
X_clr <- X
X_clr[X_clr == 0] <- 1e-10
X_clr <- log(X_clr)
X_clr <- X_clr - rowMeans(X_clr)

# Learn a metric
M <- learn_melsi_metric_robust(X_clr, y, B = 10)

# Calculate distances
dist_matrix <- calculate_mahalanobis_dist_robust(X_clr, M)
cat("Distance matrix dimensions:", attr(dist_matrix, "Size"), "x", attr(dist_matrix, "Size"), "\n")
}
\seealso{
\code{\link{learn_melsi_metric_robust}}, \code{\link{run_melsi_permutation_test}}
}
